// Generated automatically from src/module/os.wren. Do not edit.
static const char* osModuleSource =
"class Platform {\n"
"  foreign static isPosix\n"
"  foreign static name\n"
"\n"
"  static isWindows { name == \"Windows\" }\n"
"}\n"
"\n"
"class Process {\n"
"  // TODO: This will need to be smarter when wren supports CLI options.\n"
"  static arguments { allArguments[2..-1] }\n"
"\n"
"  foreign static allArguments\n"
"}\n"
"\n"
"class Subprocess {\n"
"\n"
"	pid { _pid }\n"
"\n"
"	exitCode {\n"
"		__stdinBuffers[_pid]\n"
"	}\n"
"\n"
"	//loads more data into stdin\n"
"	stdIn=(x){\n"
"		__stdInBuffers[_pid] = stdInBuffer + x\n"
"	}\n"
"\n"
"	//gets a fiber that will yield everything from stdout since it last yielded\n"
"	//WARNING: calling one fiber will clear the global buffer for that PID,\n"
"	//avoid getting multipul stdOut's\n"
"	stdOut { Fiber.new {\n"
"		while(!_exitCode){\n"
"			var stdOut = __stdOutBuffers[_pid]\n"
"			__stdOutBuffers[_pid] = \"\"\n"
"			Fiber.yield(stdOut)\n"
"		}\n"
"	} }\n"
"\n"
"	//register a callback to be called when we have more data from stdOut\n"
"	onOutCB=(cb){\n"
"		__onOutCBs[_pid] = cb\n"
"	}\n"
"\n"
"	//register a callback to be called when the process exits\n"
"	onExitCB=(cb){\n"
"		__onExitCBs[_pid] = cb\n"
"	}\n"
"\n"
"	//will launch a subproces, and calls fn with the process' PID\n"
"	construct spawn(command){\n"
"		//create the static buffers if they do not exist\n"
"		if(!__stdInBuffers){\n"
"			__stdInBuffers = {}\n"
"		}\n"
"\n"
"		if(!__stdOutBuffers){\n"
"			__stdOutBuffers = {}\n"
"		}\n"
"\n"
"		if(!__exitCodeBuffers){\n"
"			__exitCodeBuffers = {}\n"
"		}\n"
"\n"
"		if(!__onOutCBs){\n"
"			__onOutCBs = {}\n"
"		}\n"
"\n"
"		if(!__onExitCBs){\n"
"			__onExitCBs = {}\n"
"		}\n"
"\n"
"		_pid = Subprocess.spawn_(command)\n"
"\n"
"		__stdInBuffers[_pid] = \"\"\n"
"		__stdOutBuffers[_pid] = \"\"\n"
"		__exitCodeBuffers[_pid] = null\n"
"\n"
"		__onOutCBs[_pid] = Fn.new {}\n"
"		__onExitCBs[_pid] = Fn.new {}\n"
"	}\n"
"\n"
"	static recieveStdOut_(pid, stdOut){\n"
"		__stdOutBuffers[pid] = __stdOutBuffers[pid] + stdOut\n"
"		__onOutCBs[pid].call()\n"
"	}\n"
"\n"
"	static recieveExit(pid, exitCode){\n"
"		__exitCodeBuffers[pid] = exitCode\n"
"		__onExitCBs[pid].call(exitCode)\n"
"	}\n"
"\n"
"	foreign static spawn_(command)\n"
"}\n";
